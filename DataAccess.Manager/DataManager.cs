using System;
using System.Collections.Generic;
using System.Data;
using System.Data.Common;
using System.Data.SqlClient;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace DataAccess.Manager {
    public class DataManager {
        PoolConnection poolConnection;

        #region Builders
        /// <summary>
        /// 
        /// </summary>
        /// <param name="connectionString"></param>
        /// <param name="type"></param>
        /// 
        public DataManager() {

        }
        public DataManager(string connectionString, ConnectionType type) {
            poolConnection = new PoolConnection(connectionString, type);
        }
        public DataManager(SqlTransaction transaction) {
            poolConnection = new PoolConnection(transaction);
            poolConnection.Type = ConnectionType.SQLServer;
        }
        /// <summary>
        /// 
        /// </summary>
        /// <param name="serverName"></param>
        /// <param name="dataBaseName"></param>
        /// <param name="userName"></param>
        /// <param name="pasword"></param>
        /// <param name="type"></param>
        public DataManager(string serverName, string dataBaseName, string userName, string pasword, ConnectionType type) {
            poolConnection = new PoolConnection(serverName, dataBaseName, userName, pasword, type);
        }
        #endregion

        #region Management Parameters
        private SqlParameter[] createSqlParameters(IEnumerable<PoolConnectionParameters> parameters) {
            List<SqlParameter> prm = new List<SqlParameter>();
            foreach (var p in parameters) {
                SqlParameter param = new SqlParameter();
                if (!String.IsNullOrEmpty(p.ParameterName)) {
                    param.ParameterName = p.ParameterName;
                }

                if (p.ParameterValue != null) {
                    param.Value = p.ParameterValue;
                }

                if (p.ParemeterDbType != null && p.ParemeterDbType > 0) {
                    param.SqlDbType = (SqlDbType)p.ParemeterDbType;
                }

                if (p.ParameterDirection != null && p.ParameterDirection > 0) {
                    param.Direction = (ParameterDirection)p.ParameterDirection;
                }

                prm.Add(param);
            }

            return prm.ToArray();
        }

        private void refreshReturnValueSql(IEnumerable<PoolConnectionParameters> original, SqlParameter[] newValues) {
            foreach (var p in original.Where(x =>
                x.ParameterDirection == (int)ParameterDirection.ReturnValue ||
                x.ParameterDirection == (int)ParameterDirection.Output ||
                x.ParameterDirection == (int)ParameterDirection.InputOutput
                ).ToList()) {
                var rt = newValues.Where(n => n.ParameterName == p.ParameterName).FirstOrDefault();
                if (rt != null) {
                    p.ParameterValue = rt.Value;
                }
            }

        }

        #endregion

        #region public Methods
        /// <summary>
        ///  Execute a Command (that returns a resultset) against the specified DataConnection using the provided parameters.
        /// </summary>
        /// <param name="commandType">The CommandType (stored procedure, text, etc.)</param>
        /// <param name="commandText">The stored procedure name or T-SQL command</param>
        /// <param name="parameters">An array of Paramters used to execute the command</param>
        /// <returns>A dataset containing the resultset generated by the command</returns>
        public DataSet ExecuteDataSet(CommandType commandType, String commandText, IEnumerable<PoolConnectionParameters> parameters) {
            DataSet dtReturn = null;
            try {
                poolConnection.OpenConnection();

                switch (poolConnection.Type) {
                    case ConnectionType.SQLServer:
                        SqlParameter[] prm = createSqlParameters(parameters);
                        dtReturn = SqlHelper.ExecuteDataSet(poolConnection.connSQLS, commandType, commandText, prm, 0);
                        refreshReturnValueSql(parameters, prm);
                        break;
                }
                return dtReturn;
            } catch (Exception ex) {
                throw ex;
            } finally {
                poolConnection.CloseConnection();
            }
        }

        public DataSet ExecuteDataSet(SqlTransaction transaction, CommandType commandType, String commandText, IEnumerable<PoolConnectionParameters> parameters) {
            DataSet dtReturn = null;
            try {
                SqlParameter[] prm = createSqlParameters(parameters);
                if (transaction == null) {
                    poolConnection.OpenConnection();
                    dtReturn = SqlHelper.ExecuteDataSet(poolConnection.connSQLS, commandType, commandText, prm, 0);
                } else
                    dtReturn = SqlHelper.ExecuteDataSet(transaction, commandType, commandText, prm, 0);
                refreshReturnValueSql(parameters, prm);

                return dtReturn;
            } catch (Exception ex) {
                throw ex;
            } finally {
                poolConnection.CloseConnection();
            }
        }

        /// <summary>
        ///  Execute a Command (that returns a resultset) against the specified DataConnection using the provided parameters.
        /// </summary>
        /// <param name="commandType">The CommandType (stored procedure, text, etc.)</param>
        /// <param name="commandText">The stored procedure name or T-SQL command</param>
        /// <returns>A dataset containing the resultset generated by the command</returns>
        public DataSet ExecuteDataSet(CommandType commandType, String commandText) {
            try {
                //DataSet dtReturn = ExecuteDataSet(commandType, commandText, null);
                DataSet dtReturn = ExecuteDataSet(commandType, commandText, new List<PoolConnectionParameters>());
                return dtReturn;
            } catch (Exception ex) {
                throw ex;
            } finally {
                poolConnection.CloseConnection();
            }
        }

        /// <summary>
        ///  Execute a Command (that not returns a resultset) against the specified DataConnection using the provided parameters.
        /// </summary>
        /// <param name="commandType">The CommandType (stored procedure, text, etc.)</param>
        /// <param name="commandText">The stored procedure name or T-SQL command</param>
        /// <param name="parameters">An array of Paramters used to execute the command</param>
        public void ExecuteNonQuery(CommandType commandType, String commandText, IEnumerable<PoolConnectionParameters> parameters) {
            try {
                poolConnection.OpenConnection();

                switch (poolConnection.Type) {
                    case ConnectionType.SQLServer:
                        SqlParameter[] prm = createSqlParameters(parameters);
                        SqlHelper.ExecuteNonQuery(poolConnection.connSQLS, commandType, commandText, prm, 0);
                        refreshReturnValueSql(parameters, prm);
                        break;
                }
            } catch (Exception ex) {
                throw ex;
            } finally {
                poolConnection.CloseConnection();
            }
        }

        /// <summary>
        ///  Execute a Command (that not returns a resultset) against the specified DataConnection using the provided parameters.
        /// </summary>
        /// <param name="commandType">The CommandType (stored procedure, text, etc.)</param>
        /// <param name="commandText">The stored procedure name or T-SQL command</param>
        public void ExecuteNonQuery(CommandType commandType, String commandText) {
            try {
                ExecuteNonQuery(commandType, commandText, new List<PoolConnectionParameters>());
            } catch (Exception ex) {
                throw ex;
            } finally {
            }
        }

        public void ExecuteNonQuery(SqlTransaction transaction, CommandType commandType, String commandText, IEnumerable<PoolConnectionParameters> parameters) {
            try {
                SqlParameter[] prm = createSqlParameters(parameters);
                if (transaction == null) {
                    poolConnection.OpenConnection();
                    SqlHelper.ExecuteNonQuery(poolConnection.connSQLS, commandType, commandText, prm, 0);
                } else
                    SqlHelper.ExecuteNonQuery(transaction, commandType, commandText, prm);
                refreshReturnValueSql(parameters, prm);
            } catch (Exception ex) {
                throw ex;
            } finally {
                poolConnection.CloseConnection();
            }
        }

        /// <summary>
        ///  Execute a Command (that not returns a resultset) against the specified DataConnection using the provided parameters.
        /// </summary>
        /// <param name="commandType">The CommandType (stored procedure, text, etc.)</param>
        /// <param name="commandText">The stored procedure name or T-SQL command</param>
        public void ExecuteNonQuery(SqlTransaction transaction, CommandType commandType, String commandText) {
            try {
                ExecuteNonQuery(transaction, commandType, commandText, new List<PoolConnectionParameters>());
            } catch (Exception ex) {
                throw ex;
            }
        }

        /// <summary>
        /// Execute a Command (that returns a 1x1 resultset) against the specified DataConnection using the provided parameters.
        /// </summary>
        /// <param name="commandType">The CommandType (stored procedure, text, etc.)</param>
        /// <param name="commandText">The stored procedure name or T-SQL command</param>
        /// <param name="parameters">An array of Paramters used to execute the command</param>
        /// <returns>An object containing the value in the 1x1 resultset generated by the command</returns>
        public Object ExecuteDataScalar(CommandType commandType, String commandText, IEnumerable<PoolConnectionParameters> parameters) {
            try {
                Object objReturn = null;
                poolConnection.OpenConnection();

                switch (poolConnection.Type) {
                    case ConnectionType.SQLServer:
                        SqlParameter[] prm = createSqlParameters(parameters);
                        objReturn = SqlHelper.ExecuteScalar(poolConnection.connSQLS, commandType, commandText, prm, 0);
                        refreshReturnValueSql(parameters, prm);
                        break;
                }
                return objReturn;
            } catch (Exception ex) {
                throw ex;
            } finally {
                poolConnection.CloseConnection();
            }
        }

        /// <summary>
        /// Execute a Command (that returns a 1x1 resultset) against the specified DataConnection using the provided parameters.
        /// </summary>
        /// <param name="commandType">The CommandType (stored procedure, text, etc.)</param>
        /// <param name="commandText">The stored procedure name or T-SQL command</param>
        /// <returns>An object containing the value in the 1x1 resultset generated by the command</returns>
        public Object ExecuteDataScalar(CommandType commandType, String commandText) {
            try {
                Object objReturn = ExecuteDataScalar(commandType, commandText, new List<PoolConnectionParameters>());
                return objReturn;
            } catch (Exception ex) {
                throw ex;
            } finally {
            }
        }

        public Object ExecuteDataScalar(SqlTransaction transaction, CommandType commandType, String commandText, IEnumerable<PoolConnectionParameters> parameters) {
            try {
                SqlParameter[] prm = createSqlParameters(parameters);
                Object objReturn;
                if (transaction == null) {
                    poolConnection.OpenConnection();
                    objReturn = SqlHelper.ExecuteScalar(poolConnection.connSQLS, commandType, commandText, prm, 0);
                } else
                    objReturn = SqlHelper.ExecuteScalar(transaction, commandType, commandText, prm, 0);
                return objReturn;
            } catch (Exception ex) {
                throw ex;
            } finally {
                poolConnection.CloseConnection();
            }
        }

        /// <summary>
        /// Execute a Command (that returns a datareader object) against the specified DataConnection using the provided parameters.
        /// </summary>
        /// <param name="commandType">The CommandType (stored procedure, text, etc.)</param>
        /// <param name="commandText">The stored procedure name or T-SQL command</param>
        /// <param name="parameters">An array of Paramters used to execute the command</param>
        /// <returns>An object that reads a forward-only stream of rows from a data source.</returns>
        public DbDataReader ExecuteReader(CommandType commandType, String commandText, IEnumerable<PoolConnectionParameters> parameters) {
            try {
                DbDataReader objReturn = null;
                poolConnection.OpenConnection();

                switch (poolConnection.Type) {
                    case ConnectionType.SQLServer:
                        SqlParameter[] prm = createSqlParameters(parameters);
                        objReturn = SqlHelper.ExecuteReader(poolConnection.connSQLS, commandType, commandText, prm, 0);
                        refreshReturnValueSql(parameters, prm);
                        break;
                }
                return objReturn;
            } catch (Exception ex) {
                throw ex;
            }
        }
        public DbDataReader ExecuteReaderTransaction(CommandType commandType, String commandText, IEnumerable<PoolConnectionParameters> parameters) {
            try {
                DbDataReader objReturn = null;

                switch (poolConnection.Type) {
                    case ConnectionType.SQLServer:
                        SqlParameter[] prm = createSqlParameters(parameters);
                        objReturn = SqlHelper.ExecuteReader(poolConnection.transaction, commandType, commandText, prm, 0);
                        refreshReturnValueSql(parameters, prm);
                        break;
                }
                return objReturn;
            } catch (Exception ex) {
                throw ex;
            }
        }
        /// <summary>
        /// Execute a Command (that returns a datareader object) against the specified DataConnection using the provided parameters.
        /// </summary>
        /// <param name="commandType">The CommandType (stored procedure, text, etc.)</param>
        /// <param name="commandText">The stored procedure name or T-SQL command</param>
        /// <returns>An object that reads a forward-only stream of rows from a data source.</returns>
        public DbDataReader ExecuteReader(CommandType commandType, String commandText) {
            try {
                DbDataReader objReturn = ExecuteReader(commandType, commandText, new List<PoolConnectionParameters>());
                return objReturn;
            } catch (Exception ex) {
                throw ex;
            } finally {
            }
        }

        /// <summary>
        /// 
        /// </summary>
        /// <param name="data"></param>
        /// <param name="tableName"></param> 
        public void BulkInsert(DataTable data, String tableName) {
            try {
                poolConnection.OpenConnection();

                switch (poolConnection.Type) {
                    case ConnectionType.SQLServer:
                        string sourcetable = string.Format("select top 1 * from {0}", tableName);
                        DataTable dtsource = ExecuteDataSet(CommandType.Text, sourcetable).Tables[0];
                        SqlBulkCopy bulkInsert = new SqlBulkCopy(poolConnection.connSQLS);
                        foreach (DataColumn col in data.Columns) {
                            if (dtsource.Columns.Contains(col.ColumnName.Trim().ToString())) {
                                int index = dtsource.Columns.IndexOf(col.ColumnName.Trim().ToString());
                                bulkInsert.ColumnMappings.Add(col.ColumnName, dtsource.Columns[index].ToString());
                            }
                        }
                        bulkInsert.DestinationTableName = tableName;
                        poolConnection.OpenConnection();
                        bulkInsert.BulkCopyTimeout = 0;
                        bulkInsert.WriteToServer(data);
                        break;
                        //case ConnectionType.SQLServer:
                        //    SqlBulkCopy bulkInsert = new SqlBulkCopy(poolConnection.connSQLS);
                        //    foreach (DataColumn col in data.Columns)
                        //    {
                        //        bulkInsert.ColumnMappings.Add(col.ColumnName, col.ColumnName);
                        //    }
                        //    bulkInsert.DestinationTableName = tableName;
                        //    bulkInsert.WriteToServer(data);
                        //    break;
                }
            } catch (Exception ex) {
                throw ex;
            } finally {
                poolConnection.CloseConnection();
            }

        }

        public void BulkInsert(DataTable data, String tableName, Dictionary<string, string> columns) {
            try {
                poolConnection.OpenConnection();

                switch (poolConnection.Type) {
                    case ConnectionType.SQLServer:
                        SqlBulkCopy bulkInsert = new SqlBulkCopy(poolConnection.connSQLS);

                        foreach (var col in columns) {
                            bulkInsert.ColumnMappings.Add(col.Key, col.Value);
                        }

                        bulkInsert.DestinationTableName = tableName;
                        bulkInsert.WriteToServer(data);
                        break;
                }
            } catch (Exception ex) {
                throw ex;
            } finally {
                poolConnection.CloseConnection();
            }

        }


        public void BulkInsert(SqlTransaction transaction, DataTable data, String tableName, Dictionary<string, string> columns) {
            try {
                poolConnection.OpenConnection();

                switch (poolConnection.Type) {
                    case ConnectionType.SQLServer:
                        SqlBulkCopy bulkInsert;
                        if (transaction == null)
                            bulkInsert = new SqlBulkCopy(poolConnection.connSQLS);
                        else
                            bulkInsert = new SqlBulkCopy(poolConnection.connSQLS, SqlBulkCopyOptions.Default, transaction);

                        foreach (var col in columns) {
                            bulkInsert.ColumnMappings.Add(col.Key, col.Value);
                        }

                        bulkInsert.DestinationTableName = tableName;
                        bulkInsert.WriteToServer(data);
                        break;
                }
            } catch (Exception ex) {
                throw ex;
            } finally {
                poolConnection.CloseConnection();
            }

        }

        public void CloseConnection() {
            poolConnection.CloseConnection();
        }
        #endregion
    }
}
